useDynLib(transitreg, .registration = TRUE, .fixes = "C_")

import("Formula")
import("mgcv")
import("topmodels")

importFrom("grDevices", "rgb")

importFrom("graphics", "barplot", "grid", "hist", "lines", "par",
  "points", "rug")

importFrom("stats", "median", "runif", "coef",
  "as.formula", "binomial", "density", "dnorm",
  "fitted", "lm", "model.frame", "model.response", "na.omit",
  "pnorm", "ppoints", "predict", "qnorm", "qqnorm",
  "quantile", "residuals", "sd", "terms", "update",
  "formula", "setNames")

importFrom("distributions3", "pdf", "log_pdf", "cdf", "random")

export(
  "transitreg",
  "transitreg_data",
  "transitreg_dist",
  "transitreg_detect_cores",
  "reto",
  "convert_tp"
)

S3method(plot, transitreg)
S3method(predict, transitreg)
S3method(model.frame, transitreg)
S3method(residuals, transitreg)
S3method(logLik, transitreg)
S3method(summary, transitreg)
S3method(formula, transitreg)
S3method(coef, transitreg)
S3method(print, transitreg)
S3method(rootogram, transitreg)

## -------------------------------------------
## Distributions3 implementation
## -------------------------------------------
importFrom("distributions3", "prodist", "is_discrete", "is_continuous", "support")
importFrom("utils", "head", "tail")
importFrom("stats", "na.pass")

S3method(prodist,     transitreg)
S3method(newresponse, transitreg)

# Main 'Transition()' constructor function
export("Transition")

# ... methods for handling objects
S3method(as.matrix,      Transition)
S3method(format,         Transition)
S3method(is_discrete,    Transition)
S3method(is_continuous,  Transition)
S3method(support,        Transition)
S3method(c,              Transition)

# ... methods to evaluate the distributions
S3method(pdf,            Transition)
S3method(log_pdf,        Transition)
S3method(cdf,            Transition)
S3method(quantile,       Transition)
S3method(median,         Transition)
S3method(mean,           Transition)
S3method(random,         Transition)



## GLMNET test
importFrom("mgcv", "interpret.gam", "smoothCon")

