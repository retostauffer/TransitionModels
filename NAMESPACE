useDynLib(TransitionModels, .registration = TRUE, .fixes = "C_")

import("Formula")
import("mgcv")
import("topmodels")

importFrom("grDevices", "rgb")

importFrom("graphics", "barplot", "grid", "hist", "lines", "par",
  "points", "rug")

importFrom("stats", "median", "runif", "coef",
  "as.formula", "binomial", "density", "dnorm",
  "fitted", "lm", "model.frame", "model.response", "na.omit",
  "pnorm", "ppoints", "predict", "qnorm", "qqnorm",
  "quantile", "residuals", "sd", "terms", "update",
  "formula", "setNames")

importFrom("distributions3", "pdf", "log_pdf", "cdf", "random")

export(
  "tm",
  "tm_data",
  "tm_dist",
  "tm_detect_cores"
)

S3method(plot, tm)
S3method(predict, tm)
S3method(residuals, tm)
S3method(logLik, tm)
S3method(summary, tm)
S3method(formula, tm)
S3method(coef, tm)
S3method(print, tm)
S3method(rootogram, tm)

## Distributions3 implementation
importFrom("distributions3", "prodist", "is_discrete", "is_continuous", "support")
importFrom("utils", "head", "tail")
importFrom("stats", "na.pass")

S3method(prodist,     tm)
S3method(procast,     tm)
S3method(newresponse, tm)

export("tmdist")
S3method(as.matrix,      tmdist)
S3method(format,         tmdist)
S3method(quantile,       tmdist)
S3method(pdf,            tmdist)
S3method(log_pdf,        tmdist)
S3method(cdf,            tmdist)
S3method(quantile,       tmdist)
S3method(median,         tmdist)
S3method(mean,           tmdist)
S3method(random,         tmdist)

S3method(is_discrete,    tmdist)
S3method(is_continuous,  tmdist)
S3method(support,        tmdist)

## GLMNET test
importFrom("mgcv", "interpret.gam", "smoothCon")

